/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cyprusgui;

import client.ClientController;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import support.ImageUtils;
import support.MessageClient;

/**
 *
 * @author James
 */
public class ImageBrowserForm extends javax.swing.JFrame implements MessageClient {

    private int index;
    private ArrayList<byte[]> images;
    private ArrayList<String> plateStrings;
    private boolean initialImageShown;
    private boolean searching;

    /**
     * Creates new form ImageBrowserForm
     */
    public ImageBrowserForm() {
        initComponents();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        imageLabel.setText("Initializing...");
        initialImageShown = false;
        searching = false;
        plateStrings = new ArrayList<>();
        images = new ArrayList<>();
        index = 0;
        ClientController.sendImageRequest(index);
        ClientController.sendImageRequest(index + 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(480, 460));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setMaximumSize(new java.awt.Dimension(73, 23));
        nextButton.setMinimumSize(new java.awt.Dimension(73, 23));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        imageLabel.setMaximumSize(new java.awt.Dimension(460, 440));

        searchButton.setText("Search");
        searchButton.setMaximumSize(new java.awt.Dimension(73, 23));
        searchButton.setMinimumSize(new java.awt.Dimension(73, 23));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 469, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        if (index < images.size() - 1) {
            index++;
            imageLabel.setIcon(new ImageIcon(images.get(index)));
            searchTextField.setText(plateStrings.get(index));

            if (index == images.size() - 1) {
                ClientController.sendImageRequest(index + 1);
            }
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ClientController.registerImageListener(this);
    }//GEN-LAST:event_formWindowOpened

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (index > 0) {
            index--;
            imageLabel.setIcon(new ImageIcon(images.get(index)));
            searchTextField.setText(plateStrings.get(index));
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String searchParam = searchTextField.getText().trim();
        if (!searchParam.isEmpty()) {
            //Search already downloaded images
            if (plateStrings.contains(searchParam)) {
                imageLabel.setIcon(new ImageIcon(images.get(plateStrings.indexOf(searchParam))));
                searchTextField.setText(plateStrings.get(plateStrings.indexOf(searchParam)));
            } else {
                searching = true;
                ClientController.searchImageRequest(searchParam.substring(0, 7));
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void errorOnWrite(Exception e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void errorOnRead(Exception e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void onMessage(byte[] message) {

        String[] plateAndLot = ImageUtils.getPlateAndLotFromBytes(message);
        if (plateAndLot != null) {
            plateStrings.add(plateAndLot[0]);
            images.add(message);

            if (!initialImageShown) {
                imageLabel.setText("");
                imageLabel.setIcon(new ImageIcon(images.get(0)));
                searchTextField.setText(plateStrings.get(0));
                initialImageShown = true;
            } else if (searching) {
                imageLabel.setIcon(new ImageIcon(images.get(images.size() - 1)));
                searchTextField.setText(plateStrings.get(plateStrings.size() - 1));
                searching = false;
            }
        }
    }
}
